name: Release

on:
  workflow_call:
    inputs:
      dry-run:
        description: 'Compiles the app but not upload artifacts to distribution server'
        default: false
        required: false
        type: boolean
    secrets:
      GH_TOKEN:
        required: true
      VITE_APP_API:
        required: true
      VITE_START_PAGE_URL:
        required: true

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  draft_release:
    permissions:
      contents: write

    strategy:
      fail-fast: true
      matrix:
        os: [windows-latest, macos-latest]
        node_version: [22]
        # Windows 只需要 x64，macOS 需要 x64 和 arm64
        include:
          - os: windows-latest
            arch: x64
          - os: macos-latest
            arch: x64
          - os: macos-latest
            arch: arm64

    runs-on: ${{ matrix.os }}

    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Git LFS
        run: |
          git lfs install
          git lfs pull

      # 修复点：使用环境变量代替 npm config
      - name: Configure environment
        env:
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 1  # 正确配置方式
          ELECTRON_MIRROR: "https://npmmirror.com/mirrors/electron/"
          NODE_PRE_GYP_MIRROR: "https://npmmirror.com/mirrors/node-pre-gyp/"
        run: |
          echo "Environment configured:"
          echo "PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=$PUPPETEER_SKIP_CHROMIUM_DOWNLOAD"
          echo "ELECTRON_MIRROR=$ELECTRON_MIRROR"

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache/electron
            ~/.cache/node-gyp
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Setup macOS build tools
        if: matrix.os == 'macos-latest'
        run: |
          # 设置 Xcode
          sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
          sudo xcodebuild -license accept
          
          # 安装 Python 3.11
          brew install python@3.11 make gcc
          
          # 更新 pip 和安装必要的包
          /opt/homebrew/opt/python@3.11/bin/pip3.11 install --upgrade pip setuptools wheel
          
          # 设置环境变量
          PYTHON_PATH="/opt/homebrew/opt/python@3.11/bin/python3.11"
          echo "PYTHON=$PYTHON_PATH" >> $GITHUB_ENV
          
          # 创建 .npmrc 文件
          echo "python=$PYTHON_PATH" > ~/.npmrc
          
          # 验证设置
          echo "Python path: $PYTHON_PATH"
          $PYTHON_PATH --version
          $PYTHON_PATH -c "import setuptools; print('setuptools:', setuptools.__version__)"
          
          # 设置 PATH
          echo "/opt/homebrew/opt/python@3.11/bin" >> $GITHUB_PATH
          
          # 网络设置
          echo "network=inet" > ~/.curlrc

      - name: Use Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
          cache: npm
          cache-dependency-path: '**/package-lock.json'

      - name: Install native modules
        run: |
          # 验证环境
          echo "Using Python: $PYTHON"
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          
          # 安装模块
          npm install --ignore-scripts active-win sqlite3 electron

      - name: Rebuild native modules
        if: matrix.os == 'macos-latest'
        env:
          PYTHON: /opt/homebrew/opt/python@3.11/bin/python3.11
        run: |
          # x64 架构构建
          if [ "${{ matrix.arch }}" = "x64" ]; then
            SDKROOT=$(xcrun --show-sdk-path) NODE_GYP_FORCE_PYTHON=$PYTHON npm rebuild sqlite3 --build-from-source --target_arch=x64
          fi
          
          # arm64 架构构建
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            SDKROOT=$(xcrun --show-sdk-path) NODE_GYP_FORCE_PYTHON=$PYTHON npm rebuild sqlite3 --build-from-source --target_arch=arm64
          fi

      - name: Install dependencies
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 20
          max_attempts: 3
          retry_wait_seconds: 30
          command: npm ci --verbose

      # 后续步骤保持不变...
      - name: Create .env.production.local
        run: |
          echo "VITE_APP_API=${{ secrets.VITE_APP_API }}" > .env.production.local
          echo "VITE_START_PAGE_URL=${{ secrets.VITE_START_PAGE_URL }}" >> .env.production.local

      - name: Build Project
        run: |
          npm run build
          ls -la packages/main/dist/
          ls -la packages/preload/dist/
          ls -la packages/renderer/dist/

      - name: Build macOS
        if: matrix.os == 'macos-latest'
        run: |
          # 设置 Xcode
          sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
          sudo xcodebuild -license accept
          
          # 构建 native addon（添加详细日志）
          npm run build:native-addon:mac --verbose
          npm run rebuild-deps:mac --verbose
          
          # 检查构建产物
          ls -la packages/main/src/native-addon/build/Release/
          
          # 构建和发布
          npm run publish --verbose
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Publish
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 6
          retry_wait_seconds: 15
          command: >
            npx electron-builder --config .electron-builder.config.js 
            --publish always
            ${{ matrix.os == 'windows-latest' && '--win' || '' }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          BUILD_TIME: ${{ github.run_number }}

      # 添加验证步骤
      - name: Verify Release Assets
        if: success() || failure()  # 即使前一步失败也运行
        run: |
          RELEASE_URL="https://api.github.com/repos/${{ github.repository }}/releases/latest"
          ASSETS=$(curl -H "Authorization: token ${{ secrets.GH_TOKEN }}" $RELEASE_URL)
          if echo "$ASSETS" | grep -q "${BUILD_TIME}"; then
            echo "Release assets verified successfully"
            exit 0
          else
            echo "Release assets verification failed"
            exit 1
          fi

