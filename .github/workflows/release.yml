name: Release

on:
  workflow_call:
    inputs:
      dry-run:
        description: 'Compiles the app but not upload artifacts to distribution server'
        default: false
        required: false
        type: boolean
    secrets:
      GH_TOKEN:
        required: true
      BUILD_CERTIFICATE_BASE64:
        required: true
      P12_PASSWORD:
        required: true
      KEYCHAIN_PASSWORD:
        required: true
      APPLE_IDENTITY:
        required: true
      VITE_APP_API:
        required: true
      VITE_START_PAGE_URL:
        required: true

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  draft_release:
    permissions:
      contents: write

    strategy:
      fail-fast: true
      matrix:
        os: [windows-latest, macos-latest]
        node_version: [22]
        # Windows 只需要 x64，macOS 需要 x64 和 arm64
        include:
          - os: windows-latest
            arch: x64
          - os: macos-latest
            arch: x64
          - os: macos-latest
            arch: arm64

    runs-on: ${{ matrix.os }}

    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Git LFS
        run: |
          git lfs install
          git lfs pull

      # 修复点：使用环境变量代替 npm config
      - name: Configure environment
        env:
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 1  # 正确配置方式
          ELECTRON_MIRROR: "https://npmmirror.com/mirrors/electron/"
          NODE_PRE_GYP_MIRROR: "https://npmmirror.com/mirrors/node-pre-gyp/"
        run: |
          echo "Environment configured:"
          echo "PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=$PUPPETEER_SKIP_CHROMIUM_DOWNLOAD"
          echo "ELECTRON_MIRROR=$ELECTRON_MIRROR"

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache/electron
            ~/.cache/node-gyp
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Setup macOS build tools
        if: matrix.os == 'macos-latest'
        run: |
          sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
          sudo xcodebuild -license accept
          brew install python3 make gcc
          echo "network=inet" > ~/.curlrc

      - name: Use Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
          cache: npm
          cache-dependency-path: '**/package-lock.json'

      - name: Install native modules
        run: npm install --ignore-scripts active-win sqlite3 electron

      - name: Rebuild native modules
        if: matrix.os == 'macos-latest'
        run: |
          npm rebuild sqlite3 --build-from-source

      - name: Install dependencies
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 20
          max_attempts: 3
          retry_wait_seconds: 30
          command: npm ci --verbose
      
      - name: Build local native addon
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            if [ "${{ matrix.arch }}" = "x64" ]; then
              npm run build:native-addon:mac-x64
            elif [ "${{ matrix.arch }}" = "arm64" ]; then
              npm run build:native-addon:mac-arm64
            fi
          fi

      # 后续步骤保持不变...
      - name: Create .env.production.local
        run: |
          echo "VITE_APP_API=${{ secrets.VITE_APP_API }}" > .env.production.local
          echo "VITE_START_PAGE_URL=${{ secrets.VITE_START_PAGE_URL }}" >> .env.production.local

      - name: Install Apple certificates
        if: matrix.os == 'macos-latest'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
        run: |
          CERTIFICATE_PATH=$HOME/certificates
          KEYCHAIN_PATH=$HOME/Library/Keychains/build.keychain-db
          
          mkdir -p $CERTIFICATE_PATH
          
          # 输出证书长度（不要显示内容）
          echo "Certificate length: ${#BUILD_CERTIFICATE_BASE64}"
          
          # 使用 -D 参数进行解码
          echo "$BUILD_CERTIFICATE_BASE64" | base64 -D > $CERTIFICATE_PATH/certificate.p12
          
          # 检查证书文件
          ls -l $CERTIFICATE_PATH/certificate.p12
          
          # 创建并配置钥匙串
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          
          # 导入证书
          security import $CERTIFICATE_PATH/certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          
          # 列出所有身份
          echo "All identities in keychain:"
          security find-identity -v -p codesigning build.keychain
          
          # 设置钥匙串访问权限
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          # 尝试查找特定证书
          echo "Looking for specific certificate: $APPLE_IDENTITY"
          security find-certificate -a -c "$APPLE_IDENTITY" -Z build.keychain || true

      - name: Build Project
        run: |
          npm run build
          ls -la packages/main/dist/
          ls -la packages/preload/dist/
          ls -la packages/renderer/dist/

      - name: Build and Publish
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 6
          retry_wait_seconds: 15
          command: >
            npx electron-builder --config .electron-builder.config.js 
            --publish always
            ${{ matrix.os == 'windows-latest' && '--win' || '' }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          BUILD_TIME: ${{ github.run_number }}

      # 添加验证步骤
      - name: Verify Release Assets
        if: success() || failure()  # 即使前一步失败也运行
        run: |
          RELEASE_URL="https://api.github.com/repos/${{ github.repository }}/releases/latest"
          ASSETS=$(curl -H "Authorization: token ${{ secrets.GH_TOKEN }}" $RELEASE_URL)
          if echo "$ASSETS" | grep -q "${BUILD_TIME}"; then
            echo "Release assets verified successfully"
            exit 0
          else
            echo "Release assets verification failed"
            exit 1
          fi
